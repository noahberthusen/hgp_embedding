----------------- Using pyx file ----------------
 configuration model, attempt 0	2/100	2/100
Timer unit: 1e-06 s

Total time: 4.86148 s
File: /Users/akrishna/Documents/HGP_Flip/decoder.pyx
Function: hor_subset_score at line 44

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    44                                           def hor_subset_score(hor_synd_diff, hor_weight, ver_synd_diff):
    45                                               """
    46                                               'hor' means horizontal
    47                                               'ver' means vertical
    48                                               Input:
    49                                                 'hor_synd_diff' is |s| - |s xor synd(F)| for the current F which is a flip of the columns
    50                                                 'hor_weight' is the size of F
    51                                                 ver_synd_diff[i] is the difference of syndrome size when we flip the line 'i'
    52                                               Output:
    53                                                 'ver_flips' the optimal set of lines to flip for this given flips of columns
    54                                                 'synd_diff' the syndrome difference for this flips
    55                                               When hor_weight = 0, i.e F = 0 then len(ver_flips) > 0 even if the flipping ver_flips increases the syndrome weight
    56                                               """
    57    309344       139936      0.5      2.9      cdef int synd_diff = 0
    58    309344       130574      0.4      2.7      cdef int s = 0
    59    309344       129791      0.4      2.7      cdef int i = 0
    60    309344       129587      0.4      2.7      cdef int weight = 0
    61                                               cdef int len_ver_flips = 0
    62    309344       130791      0.4      2.7  
    63                                               synd_diff = hor_synd_diff
    64    309344       129533      0.4      2.7      # print(synd_diff, hor_synd_diff, ver_synd_diff)
    65    309344       191775      0.6      3.9      ver_flips = []
    66    309344       427624      1.4      8.8      sorted_ver_synd_diff = [(ver_synd_diff[i],i) for  i in range(len(ver_synd_diff))]
    67                                               sorted_ver_synd_diff.sort(reverse=True)
    68                                               
    69   1856064       811187      0.4     16.7      
    70   1546720       677271      0.4     13.9      for (s,i) in sorted_ver_synd_diff:
    71   1546720       628143      0.4     12.9          weight = hor_weight + len_ver_flips
    72   1372991       555951      0.4     11.4          if s*weight >= synd_diff:
    73   1372991       613615      0.4     12.6              synd_diff = synd_diff + s
    74                                                       ver_flips.append(i)
    75    309344       165698      0.5      3.4              len_ver_flips = len_ver_flips + 1
    76                                           
    77                                               return (synd_diff,ver_flips)

Total time: 12.7421 s
File: /Users/akrishna/Documents/HGP_Flip/decoder.pyx
Function: score_gen at line 78

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    78                                           
    79                                           @cython.binding(True)
    80                                           def score_gen(synd_gen, gray_code):
    81                                               """
    82                                               Input:
    83                                                 'synd_gen' is a 0,1 matrix which reprensents the syndrome of the current generator
    84                                                 'gray_code' is the output of 'compute_gray_code'
    85                                               Output:
    86                                                 'best_flips' = (ver_flips,hor_flips) are two lists of lines and columns which are optimal for the generator
    87                                                 'best_synd_diff' is the syndrome difference for these flips
    88                                                 'best_weight' = len(ver_flips) + len(hor_flips)
    89                                               We go through all the possible flips of columns and use the function 'hor_subset_score'
    90     19334        11070      0.6      0.1      At the end, best_weight > 0 even it is better to flip nothing
    91     19334         9927      0.5      0.1      """
    92     19334        10048      0.5      0.1      cdef int i = 0
    93     19334         9889      0.5      0.1      cdef int j = 0
    94                                               cdef int dc = 0
    95     19334         9744      0.5      0.1      cdef int dv = 0
    96     19334         9925      0.5      0.1  
    97                                               cdef int hor_weight = 0
    98     19334         9883      0.5      0.1      cdef int hor_synd_diff = 0
    99     19334         9610      0.5      0.1  
   100                                               cdef int best_weight = 0
   101     19334         9904      0.5      0.1      cdef int best_synd_diff = 0
   102     19334        10066      0.5      0.1  
   103     19334         9849      0.5      0.1      dc = len(synd_gen)
   104     19334        10898      0.6      0.1      dv = len(synd_gen[0])
   105     19334        10126      0.5      0.1      hor_weight = 0
   106     19334        11975      0.6      0.1      hor_flips_array = [False for j in range(dv)]
   107     19334        10123      0.5      0.1      hor_synd_diff = 0
   108     96670        48390      0.5      0.4      ver_synd_diff = [0 for i in range(dc)]
   109    386680       225173      0.6      1.8      for i in range(dc):
   110                                                   for j in range(dv):
   111     19334       544260     28.2      4.3              ver_synd_diff[i] = ver_synd_diff[i] + 2*synd_gen[i][j] - 1
   112     19334         9796      0.5      0.1  
   113     19334        10189      0.5      0.1      (best_synd_diff,ver_flips) = hor_subset_score(hor_synd_diff, hor_weight, ver_synd_diff)
   114    309344       166763      0.5      1.3      best_weight = len(ver_flips)
   115    290010       152927      0.5      1.2      best_flips = (ver_flips, [])
   116    135338        68027      0.5      0.5      for j in gray_code:
   117    135338        68242      0.5      0.5          if hor_flips_array[j]:
   118    135338        66910      0.5      0.5              hor_weight = hor_weight - 1
   119    676690       391280      0.6      3.1              hor_flips_array[j] = False
   120    676690       429898      0.6      3.4              for i in range(dc):
   121                                                           ver_synd_diff[i] = ver_synd_diff[i] + 4*synd_gen[i][j] - 2
   122    154672        76909      0.5      0.6                  hor_synd_diff = hor_synd_diff - 2*synd_gen[i][j] + 1
   123    154672        77359      0.5      0.6          else:
   124    154672        76615      0.5      0.6              hor_weight = hor_weight + 1
   125    773360       444260      0.6      3.5              hor_flips_array[j] = True
   126    773360       484551      0.6      3.8              for i in range(dc):
   127                                                           ver_synd_diff[i] = ver_synd_diff[i] - 4*synd_gen[i][j] + 2
   128    290010      8782753     30.3     68.9                  hor_synd_diff = hor_synd_diff + 2*synd_gen[i][j] - 1
   129    290010       150996      0.5      1.2              
   130    290010       185230      0.6      1.5          (synd_diff,ver_flips) = hor_subset_score(hor_synd_diff, hor_weight, ver_synd_diff)
   131     67101        35223      0.5      0.3          weight = hor_weight + len(ver_flips)
   132     67101        34454      0.5      0.3          if synd_diff*best_weight > best_synd_diff*weight:
   133     67101        46206      0.7      0.4              best_synd_diff = synd_diff
   134                                                       best_weight = weight
   135     19334        12616      0.7      0.1              best_flips = (ver_flips, [j for j in range(dv) if hor_flips_array[j]])
   136                                                       
   137                                               return (best_synd_diff,best_weight,best_flips)

Total time: 16.1546 s
File: /Users/akrishna/Documents/HGP_Flip/decoder.pyx
Function: update_score_generator at line 180

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   180                                                           self.update_score_generator((c1,v2))

Total time: 1.25632 s
File: /Users/akrishna/Documents/HGP_Flip/decoder.pyx
Function: find_best_gen at line 194

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   194                                                   synd_gen = [[self.synd_matrix[ver[i]][hor[j]] for j in range(self.ccode.dv)] for i in range(self.ccode.dc)]

Total time: 9.72659 s
File: /Users/akrishna/Documents/HGP_Flip/decoder.pyx
Function: update at line 266

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   266                                                   return (vv_qbits,cc_qbits)

Total time: 18.5741 s
File: /Users/akrishna/Documents/HGP_Flip/decoder.pyx
Function: decoder at line 330

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   330                                                       
   331                                           
   332                                           @cython.binding(True)
   333                                           def decoder(ccode, synd_matrix):
   334         1           15     15.0      0.0      """
   335         1            1      1.0      0.0      Run the decoder for a given syndrome
   336         1            1      1.0      0.0      """
   337         1            1      1.0      0.0      cdef int v1 = 0
   338                                               cdef int v2 = 0
   339         1          777    777.0      0.0      cdef int c1 = 0
   340         1          203    203.0      0.0      cdef int c2 = 0
   341         1      6563662 6563662.0     35.3  
   342                                               vv_guessed_xerror = [[False for v2 in range(ccode.n)] for v1 in range(ccode.n)]
   343                                               cc_guessed_xerror = [[False for c2 in range(ccode.m)] for c1 in range(ccode.m)]
   344         1        19319  19319.0      0.1      lookup_table = Lookup_table(ccode,synd_matrix, ccode.dv, ccode.dc)
   345         1            5      5.0      0.0  
   346       156      9768932  62621.4     52.6      # print("synd weight:", lookup_table.synd_weight)
   347       251          163      0.6      0.0      gen = lookup_table.find_best_gen()
   348        95          101      1.1      0.0      while gen != None:
   349       229          145      0.6      0.0          (vv_qbits,cc_qbits) = lookup_table.update(gen)
   350        73           76      1.0      0.0          for (v1,v2) in vv_qbits:
   351                                                       vv_guessed_xerror[v1][v2] = not vv_guessed_xerror[v1][v2]
   352       156      2207925  14153.4     11.9          for (c1,c2) in cc_qbits:
   353         1        12750  12750.0      0.1              cc_guessed_xerror[c1][c2] = not cc_guessed_xerror[c1][c2]
   354                                                   # print("synd weight:", lookup_table.synd_weight)
   355                                                   gen = lookup_table.find_best_gen()
   356                                               return (lookup_table.synd_weight,xerror_to_list(ccode, (vv_guessed_xerror, cc_guessed_xerror)))

